{"version":3,"sources":["config/firebase.js","actions/listsActions.js","actions/cardsActions.js","actions/index.js","reducers/ListReducer.js","reducers/index.js","store/index.js","components/TrelloButton.js","components/TrelloForm.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloList.js","components/TrelloOpenForm.js","components/TrelloCreate.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","addListToFirebase","title","id","Date","now","ref","set","cards","addCardToFirebase","listID","text","moveFirebaseCard","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","newCardId","once","snap","value","val","listStart","Object","values","listEnd","startCards","endCards","card","remove","splice","push","i","length","update","console","log","addList","list","type","CONSTANTS","ADD_LIST_DATABASE","payload","fetchLists","lists","FETCH_LISTS","deleteList","DELETE_LIST","sort","DRAG_HAPPENED","addCard","ADD_CARD","DELETE_CARD","EDIT_LIST_TITLE","EDIT_CARD","listReducer","state","action","newCard","newState","map","newStateList","tgId","newList1","ind","listCard","afterDeleteCardState","index","newCards","cardId","newList","afterDeleteListState","afterEditTitleState","listTitle","afterEditCardState","cardText","combineReducers","createStore","rootReducer","applyMiddleware","thunkMiddleware","StyledButton","styled","Button","TrelloButton","children","onClick","variant","onMouseDown","Container","div","StyledCard","Card","StyledTextArea","Textarea","ButtonContainer","StyledIcon","Icon","TrelloForm","React","memo","onChange","closeForm","placeholder","autoFocus","e","onBlur","CardContainer","DeleteButton","EditButton","TrelloCard","dispatch","useState","isEditing","setIsEditing","setText","handleChange","target","handleDeleteCard","deleteCardfromFirebase","deleteCard","saveCard","preventDefault","editCardInFirebase","editCard","String","provided","innerRef","draggableProps","dragHandleProps","onDoubleClick","fontSize","CardContent","Typography","gutterBottom","connect","TrelloActionButton","formOpen","openForm","setState","handleInputChange","handleAddList","props","handleAddCard","cardIndex","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","style","openForButtonGroup","opacity","color","backgroundColor","renderForm","buttonTitle","overflow","minHeight","minWidth","padding","resize","width","outline","border","formButtonGroup","marginLeft","cursor","this","Component","display","alignItems","borderRadius","height","paddingLeft","marginTop","ListContainer","TitleContainer","ListTitle","h4","StyledInput","input","setListTitle","handleDeleteList","handleFocus","select","handleFinishEditing","changeListTitleInFirebase","editTitle","droppableId","onSubmit","onFocus","droppableProps","key","TrelloOpenForm","OpenFormButton","flexShrink","TrelloCreate","renderOpenForm","PureComponent","App","onDragEnd","result","destination","source","valueArray","direction","actions","bindActionCreators","forEach","data","cardArray","then","on","watchListAddedEvent","watchListDeletedEvent","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a6c52ae.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport uuid from 'uuid/v4';\nimport {addCard} from '../actions';\n//import {updateDragThunk}  from '../actions/listsActions';\nconst config = {\n  apiKey: \"AIzaSyBacJ_KKJSLLjgfSicFdtCDNPrPSNM9Pa0\",\n  authDomain: \"trello-clone-e04bd.firebaseapp.com\",\n  databaseURL: \"https://trello-clone-e04bd.firebaseio.com\",\n  projectId: \"trello-clone-e04bd\",\n  storageBucket: \"trello-clone-e04bd.appspot.com\",\n  messagingSenderId: \"339754565110\",\n  appId: \"1:339754565110:web:08f0168aff109bc09e5bd7\",\n  measurementId: \"G-L5YDB5K7CS\"\n};\nfirebase.initializeApp(config);\nconst database = firebase.database()\n\nexport const addListToFirebase = (title) => {\n  //this will give us a unique id for our tasks\n  const id = Date.now();\n  const cards = null;\n  database.ref(`/${id}`).set({\n    title, id, cards\n  })\n}\n\nexport const removeListFromFirebase = (id) => {\n    database.ref(`/${id}`).remove()\n}\n\nexport const addCardToFirebase = (listID,text) => {\n  //this will give us a unique id for our tasks\n  const id = Date.now();\n  const cards = null;\n  database.ref(`/${listID}/cards/${id}`).set({\n    id, text\n  })\n  const card = {id:id,text:text}\n  return card\n  //dispatch(addCard(dispatch,listID,card));\n}\n\nexport const deleteCardfromFirebase = (listID,cardId) => {\n  database.ref(`/${listID}/cards/${cardId}`).remove();\n}\n\n\nexport function moveFirebaseList(droppableIndexStart, droppableIndexEnd) {\n     database.ref(`/`).once('value', function(snap)  {\n          const value = snap.val();\n          const valueArray = Object.values(value);\n          //console.log(valueArray);\n          const listStart = valueArray[droppableIndexStart];\n          const listEnd = valueArray[droppableIndexEnd];\n          console.log(listStart,listEnd);\n          if(!listStart.cards) {\n            listStart.cards = [];\n          }\n          if(!listEnd.cards) {\n            listEnd.cards = [];\n          }\n          database.ref(`/${listStart.id}`).update({cards: listEnd.cards,title: listEnd.title});\n          database.ref(`/${listEnd.id}`).update({cards: listStart.cards,title:listStart.title});\n          // let tg = listStart.index;\n          // database.ref(`/${listStart.id}`).update({index:listEnd.index});\n          // database.ref(`/${listEnd.id}`).update({index:listStart.index});\n     });\n}\n\nexport function changeListTitleInFirebase(listID, listTitle) {\n  database.ref(`/${listID}`).update({title:listTitle});\n}\n\nexport const moveFirebaseCard = (droppableIdStart,droppableIdEnd,droppableIndexStart,droppableIndexEnd,draggableId) => {\n     let newCardId;\n     database.ref(`/`).once('value', function(snap)  {\n          const value = snap.val();\n          const valueArray = Object.values(value);\n          let listStart = value[droppableIdStart];\n          let listEnd = value[droppableIdEnd];\n          if(!listStart.cards) {\n            listStart.cards = [];\n          } else {\n            let startCards = Object.values(listStart.cards);\n            listStart.cards = startCards;\n          }\n          if(!listEnd.cards) {\n            listEnd.cards = [];\n          } else {\n            let endCards = Object.values(listEnd.cards);\n            listEnd.cards = endCards;\n          }\n\n          const card = listStart.cards[droppableIndexStart];\n\n          database.ref(`/${listStart.id}/cards/${card.id}`).remove();\n          listStart.cards.splice(droppableIndexStart,1)\n\n          newCardId = Date.now();\n          card.id=newCardId;\n          database.ref(`/${listEnd.id}/cards/${newCardId}`).set(card);\n          listEnd.cards.push(card);\n\n          for(var i=droppableIndexEnd+1;i<listEnd.cards.length;i++) {\n            database.ref(`/${listEnd.id}/cards/${listEnd.cards[i].id}`).update({text:listEnd.cards[i-1].text});\n            console.log(listEnd.cards);\n          }\n          database.ref(`/${listEnd.id}/cards/${listEnd.cards[droppableIndexEnd].id}`).update({text:card.text});\n     });\n     return newCardId;\n}\n\nexport function editCardInFirebase(id,listID,cardText) {\n  database.ref(`/${listID}/cards/${id}`).update({text:cardText});\n}\n\n\n\nexport default database\n","import database from '../config/firebase';\nimport  {CONSTANTS} from \"../actions\";\nimport thunkMiddleware from 'redux-thunk';\nimport {moveFbRecord}  from '../config/firebase';\n\nexport const addList = list => {\n  console.log(database);\n  return {\n    type:CONSTANTS.ADD_LIST_DATABASE,\n    payload: list,\n  }\n}\n\n// export const addListDatabase = title => {\n//   database.push().set(title);\n// };\n\nexport const fetchLists = lists => {\n    return {\n      type: CONSTANTS.FETCH_LISTS,\n      payload: lists,\n    };\n  }\n\n/**\n * THUNKS\n */\nexport function getListsThunk() {\n  return dispatch => {\n    const lists = [];\n    database.ref(`/`).once('value', snap => {\n          snap.forEach(data => {\n            let list = data.val();\n            if(!list.cards) {\n              list.cards = [];\n            } else {\n              const cardArray=Object.values(list.cards);\n              list.cards = cardArray;\n            }\n            lists.push(list)\n          })\n      })\n    .then(() => dispatch(fetchLists(lists)))\n  }\n}\n\nexport function watchListAddedEvent(dispatch) {\n  database.ref(`/`).on('child_added', (snap) => {\n    dispatch(addList(snap.val()));\n  });\n}\n\nexport function watchListDeletedEvent(dispatch) {\n  database.ref(`/`).on('child_removed', (snap) => {\n    console.log(snap.val());\n    dispatch(deleteList(snap.val().id));\n  });\n}\n\nexport const deleteList = listID => {\n  return {\n    type: CONSTANTS.DELETE_LIST,\n    payload: listID\n  }\n}\n\n\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  type,\n  newCardId\n) => {\n  console.log(\"heyy\");\n  //drag list\n  return {\n    type: CONSTANTS.DRAG_HAPPENED,\n    payload: {\n      droppableIdStart,\n      droppableIdEnd,\n      droppableIndexStart,\n      droppableIndexEnd,\n      draggableId,\n      type,\n      newCardId\n    }\n  }\n}\n\nexport const editTitle = (listID, listTitle) => {\n  return {\n    type: CONSTANTS.EDIT_LIST_TITLE,\n    payload: {listID:listID,listTitle:listTitle}\n  }\n}\n","import  {CONSTANTS} from \"../actions\";\nimport database from '../config/firebase';\n\nexport const addCard = (listID,card) => {\n  return {\n    type:CONSTANTS.ADD_CARD,\n    payload:{card,listID}\n  }\n}\nexport const deleteCard = (listID,cardId) => {\n  return {\n    type:CONSTANTS.DELETE_CARD,\n    payload:{cardId,listID}\n  }\n}\nexport const editCard = (cardId, listID, cardText) => {\n  return {\n    type:CONSTANTS.EDIT_CARD,\n    payload:{cardId,listID,cardText}\n  }\n}\n","\nexport * from './listsActions';\nexport * from './cardsActions';\n\n\n\nexport const CONSTANTS = {\n  ADD_CARD: \"ADD_CARD\",\n  ADD_LIST_DATABASE: \"ADD_LIST_DATABASE\",\n  DRAG_HAPPENED: \"DRAG_HAPPENED\",\n  FETCH_LISTS: \"FETCH_LISTS\",\n  DELETE_CARD: \"DELETE_CARD\",\n  DELETE_LIST: \"DELETE_LIST\",\n  EDIT_LIST_TITLE: \"EDIT_LIST_TITLE\",\n  EDIT_CARD: \"EDIT_CARD\"\n}\n","import {CONSTANTS} from \"../actions\";\n\n\nlet listID=2;\nlet cardID=5;\n\nconst initialState = [\n  {\n    title:\"Last Episode\",\n    id: `list-${0}`,\n    cards: [\n      {\n        id: `card-${0}`,\n        text:\"We created a static list and static card\",\n      },\n      {\n        id: `card-${1}`,\n        text:\"do sth\",\n      },\n    ]\n  },\n  {\n    title:\"This Episode\",\n    id: `list-${1}` ,\n    cards: [\n      {\n        id: `card-${2}`,\n        text:\"We will do sth else\",\n      },\n      {\n        id: `card-${3}`,\n        text:\"do sth else \",\n      },\n      {\n        id: `card-${4}`,\n        text:\"do sth else else \",\n      },\n    ]\n  }\n]\n\n\nconst listReducer = (state = [], action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        id:action.payload.card.id,\n        text:action.payload.card.text,\n      }\n      const newState = state.map(list => {\n        if(list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard],\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type\n      } = action.payload;\n      const newStateList = [...state];\n\n      //drag list\n      if(type===\"list\") {\n        const list = newStateList.splice(droppableIndexStart,1);\n        newStateList.splice(droppableIndexEnd,0,...list);\n        //switch id\n        let tgId=newStateList[droppableIndexStart].id;\n        newStateList[droppableIndexStart].id=newStateList[droppableIndexEnd].id;\n        newStateList[droppableIndexEnd].id=tgId;\n        return newStateList;\n      }\n\n        let listStart;\n        for(var i=0;i<state.length;i++) {\n          if(state[i].id==droppableIdStart) {\n            listStart= newStateList[i];\n            break;\n          }\n        }\n        let card = listStart.cards.splice(droppableIndexStart, 1);\n        card=card[0];\n        card.id=action.payload.newCardId;\n        //find the list where the drop ended\n        let listEnd;\n        for(var i=0;i<state.length;i++) {\n          if(state[i].id==droppableIdEnd) {\n            listEnd=newStateList[i];\n            break;\n          }\n        }\n        //switch id\n        listEnd.cards.push({id:action.payload.newCardId,text:\"\"});\n        for(var i=listEnd.cards.length-1;i>droppableIndexEnd;i--) {\n          listEnd.cards[i].text=listEnd.cards[i-1].text;\n        }\n        listEnd.cards[droppableIndexEnd].text=card.text;\n\n      return newStateList;\n    case CONSTANTS.FETCH_LISTS:\n        return action.payload;\n    case CONSTANTS.ADD_LIST_DATABASE:\n        const newList1 = {\n          title:action.payload.title,\n          cards: [],\n          id:action.payload.id,\n        }\n        return [...state,newList1];\n    case CONSTANTS.DELETE_CARD:\n      let ind\n      let listCard;\n      //find the list\n      let afterDeleteCardState = state.map((list,index) => {\n        if(list.id===action.payload.listID) {\n          listCard=list;\n          ind=index;\n        }\n        return list;\n      })\n      afterDeleteCardState.splice(ind,1);\n      let cardIndex;\n      let newCards=[];\n      for(var i=0;i<listCard.cards.length;i++) {\n        if(listCard.cards[i].id!==action.payload.cardId)\n        {\n          newCards.push(listCard.cards[i]);\n        }\n      }\n      const newList = {\n        title:listCard.title,\n        id:listCard.id,\n        cards:newCards\n      }\n      afterDeleteCardState.splice(ind,0,newList);\n      return afterDeleteCardState;\n    case CONSTANTS.DELETE_LIST:\n      let index;\n      let afterDeleteListState = state.map((list,i) => {\n        if(list.id===action.payload) {\n          index=i;\n        }\n        return list;\n      });\n      afterDeleteListState.splice(index,1);\n      return afterDeleteListState;\n    case CONSTANTS.EDIT_LIST_TITLE:\n    const afterEditTitleState = state.map((list,index) => {\n      if(list.id===action.payload.listID) {\n        return {\n          ...list,\n          title: action.payload.listTitle\n        }\n      } else\n        {\n          return list\n        }\n    })\n    return afterEditTitleState;\n    case CONSTANTS.EDIT_CARD:\n      let afterEditCardState = state.map((list) => {\n        if(list.id===action.payload.listID) {\n          return {\n            ...list,\n            cards:list.cards.map((card) => {\n              if(card.id===action.payload.cardId) {\n                return {\n                  ...card,\n                  text:action.payload.cardText\n                }\n              } else {\n                return card;\n              }\n            })\n          }\n        } else {\n          return list;\n        }\n      } )\n      return afterEditCardState;\n    default:\n      return state;\n  }\n};\nexport default listReducer;\n","import {combineReducers} from 'redux';\nimport listReducer from './ListReducer';\nexport default combineReducers({\n  lists: listReducer,\n});\n","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\n\n//const store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware))\n//export default store;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\n\nconst StyledButton = styled(Button)`\n  && {\n    color: white;\n    background: #5aac44;\n  }\n`;\n\nconst TrelloButton = ({ children, onClick }) => {\n  return (\n    <StyledButton variant=\"contained\" onMouseDown={onClick}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default TrelloButton;\n","\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Textarea from \"react-textarea-autosize\";\nimport Card from \"@material-ui/core/Card\";\n\nconst Container = styled.div`\nwidth: 284px;\nmargin-bottom: 8px;\n`;\n\nconst StyledCard = styled(Card)`\nmin-height: 85px;\npadding: 6px 8px 2px;\n`;\n\nconst StyledTextArea = styled(Textarea)`\nresize: none;\nmax-width: 100%;\noverflow: hidden;\noutline: none;\nborder: none;\n`;\n\nconst ButtonContainer = styled.div`\nmargin-top: 8px;\ndisplay: flex;\nalign-items: center;\nmargin-left: 8px;\n`;\n\nconst StyledIcon = styled(Icon)`\nmargin-left: 8px;\ncursor: pointer;\n`;\n\nconst TrelloForm = React.memo(\n({ list, text, onChange, closeForm, children }) => {\n  const placeholder = list\n    ? \"Enter list title...\"\n    : \"Enter a title for this card...\";\n\n  return (\n    <Container>\n      <StyledCard>\n        <StyledTextArea\n          placeholder={placeholder}\n          autoFocus\n          value={text}\n          onChange={e => onChange(e)}\n          onBlur={closeForm}\n        />\n      </StyledCard>\n      <ButtonContainer>\n        {children}\n        <StyledIcon onMouseDown={closeForm}>close</StyledIcon>\n\n      </ButtonContainer>\n    </Container>\n  );\n}\n);\n\nexport default TrelloForm;\n","import React, {useState,useEffect} from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport {Draggable} from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport Icon from \"@material-ui/core/Icon\";\nimport {deleteCard,editCard} from \"../actions\";\nimport {deleteCardfromFirebase,editCardInFirebase} from \"../config/firebase\";\nimport { connect } from \"react-redux\";\nimport TrelloButton from \"./TrelloButton\";\nimport TrelloForm from \"./TrelloForm\";\n\nconst CardContainer = styled.div`\n    margin: 0 0 8px 0;\n    position: relative;\n    max-width: 100%;\n    word-wrap: break-word;\n  `;\n\nconst DeleteButton = styled(Icon)`\n    position: absolute;\n    display:none;\n    right: 5px;\n    bottom: 5px;\n    opacity: 0.5;\n    ${CardContainer}:hover & {\n      display: block;\n      cursor: pointer;\n    }\n    &:hover {\n      opacity: 0.8;\n    }\n  `;\n\n  const EditButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  top: 5px;\n  opacity: 0.5;\n  ${CardContainer}:hover & {\n    display: block;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\n\n\nconst TrelloCard = React.memo(({text,id,index,listID,dispatch}) => {\n\n  //set state\n  const [isEditing, setIsEditing] = useState(false);\n  const [cardText, setText] = useState(\"\");\n\n\n  const closeForm = e => {\n    setIsEditing(false);\n  };\n\n  const handleChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleDeleteCard = e => {\n    deleteCardfromFirebase(listID,id);\n    dispatch(deleteCard(listID,id));\n  };\n\n  const saveCard = e => {\n    e.preventDefault();\n    editCardInFirebase(id,listID,cardText);\n    dispatch(editCard(id, listID, cardText));\n    setIsEditing(false);\n  };\n\n\n  const renderEditForm = () => {\n    return (\n      <TrelloForm text={cardText} onChange={handleChange} closeForm={closeForm}>\n        <TrelloButton onClick={saveCard}>Save</TrelloButton>\n      </TrelloForm>\n    );\n  };\n\n  const renderCard = () => {\n    return (\n      <Draggable draggableId={String(id)} index={index}>\n      {provided =>(\n        <CardContainer ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        onDoubleClick={() => setIsEditing(true)}\n        >\n            <Card>\n              <EditButton\n                  onMouseDown={() => setIsEditing(true)}\n                  fontSize=\"small\"\n                >\n                edit\n              </EditButton>\n              <DeleteButton fontSize=\"small\" onMouseDown={handleDeleteCard}>\n                delete\n              </DeleteButton>\n              <CardContent>\n                <Typography  gutterBottom>\n                  {text}\n                </Typography>\n              </CardContent>\n            </Card>\n        </CardContainer>\n      )}\n      </Draggable>\n    )\n  }\n  return isEditing ?   renderEditForm() : renderCard();\n})\nexport default connect()(TrelloCard);\n","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport {connect} from 'react-redux';\nimport { addList, addCard} from  \"../actions\";\nimport {addListToFirebase, removeTaskFromFirebase,addCardToFirebase}  from '../config/firebase';\n\nclass TrelloActionButton extends React.Component {\n  state = {\n    formOpen: false,\n    text:''\n  };\n\n  openForm = () => {\n    this.setState({\n      formOpen: true\n    })\n\n  }\n\n  closeForm = e => {\n    this.setState({\n      formOpen: false\n    })\n\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      text:e.target.value,\n    })\n  }\n\n  handleAddList = () => {\n    const {dispatch} = this.props;\n    const {text} = this.state;\n    if (text) {\n      this.setState({\n        text:\"\",\n      })\n      addListToFirebase(text);\n      //dispatch(addList(text));\n    }\n    return;\n  }\n\n  handleAddCard = () => {\n    const {dispatch,listID,cardIndex} = this.props;\n    const {text} = this.state;\n    if (text) {\n      this.setState({\n        text:\"\",\n      })\n      const card = addCardToFirebase(listID,text);\n      console.log(card);\n      this.props.dispatch(addCard(listID,card));\n    }\n    return;\n  }\n\n  renderAddButton = () => {\n    const {list} = this.props;\n    const buttonText = list ? \"Add another list\": \"Add another card\";\n    const buttonTextOpacity = list ? 1: 0.5;\n    const buttonTextColor = list ? \"white\": \"inherit\";\n    const buttonTextBackground = list ? \"rgba(0,0,0,.15)\": \"inherit\";\n    return (\n      <div\n        onClick={this.openForm}\n        style={{\n        ...style.openForButtonGroup,\n        opacity: buttonTextOpacity, color: buttonTextColor, backgroundColor: buttonTextBackground}}>\n        <Icon>add</Icon>\n        <p>{buttonText}</p>\n      </div>\n    )\n  }\n\n  renderForm = () => {\n    const {list} = this.props;\n    const placeholder = list ? \"Enter list title...\":\"Enter a title for this card...\";\n    const buttonTitle = list ? \"Add List\":\"Add Card\";\n    return (\n      <div>\n       <Card style={{\n         overflow:\"visible\",\n         minHeight:80,\n         minWidth: 272,\n         padding: \"6px 8px 2px\"\n       }}>\n        <TextareaAutosize placeholder={placeholder}\n          autoFocus onBlur={this.closeForm}\n          value={this.state.text}\n          onChange={this.handleInputChange}\n          style={{\n            resize:\"none\",\n            width:\"100%\",\n            overflow:\"hidden\",\n            outline: \"none\",\n            border:\"none\"\n          }}/>\n       </Card>\n       <div style={style.formButtonGroup}>\n        <Button onMouseDown={list ? this.handleAddList : this.handleAddCard}\n          variant=\"contained\" style={{color:\"white\",backgroundColor:\"#5aac44\"}}>\n            {buttonTitle}\n        </Button>\n        <Icon style={{marginLeft:8, cursor: \"pointer\"}}>close</Icon>\n       </div>\n      </div>\n    );\n  }\n\n  render() {\n    return this.state.formOpen ? this.renderForm(): this.renderAddButton();\n  }\n}\n\nconst style = {\n  openForButtonGroup: {\n    display:\"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    borderRadius:3,\n    height:36,\n    width: 272,\n    paddingLeft: 10\n  },\n  formButtonGroup: {\n    marginTop:8,\n    display:\"flex\",\n    alignItems:\"center\"\n  }\n}\n\nexport default connect() (TrelloActionButton);\n","import React, { useState } from 'react';\nimport TrelloCard from './TrelloCard';\nimport TrelloActionButton from './TrelloActionButton';\nimport {Droppable,Draggable} from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport {connect} from 'react-redux';\nimport Icon from \"@material-ui/core/Icon\";\nimport {removeListFromFirebase,changeListTitleInFirebase} from \"../config/firebase\";\nimport {editTitle} from \"../actions\"\nconst ListContainer = styled.div`\n  background-color: #dfe3e6;\n  border-radius:3px;\n  width: 300px;\n  padding: 8px;\n  margin-right:8px;\n  height:100%;\n  `;\n\n  const DeleteButton = styled(Icon)`\n    cursor: pointer;\n    transition: opacity 0.3s ease-in-out;\n    opacity: 0.4;\n    &:hover {\n      opacity: 0.8;\n    }\n  `;\n  const TitleContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n`;\n  const ListTitle = styled.h4`\n    transition: background 0.3s ease-in;\n    ${TitleContainer}:hover & {\n      background: #ccc;\n    }\n  `;\n\n  const StyledInput = styled.input`\n    width: 100%;\n    border: none;\n    outline-color: blue;\n    border-radius: 3px;\n    margin-bottom: 3px;\n    padding: 5px;\n`;\n\nconst TrelloList = ({title, cards, listID, index,dispatch}) => {\n  //set state\n  const [isEditing, setIsEditing] = useState(false);\n  const [listTitle, setListTitle] = useState(title);\n\n  const handleDeleteList = () => {\n    console.log(listID);\n    removeListFromFirebase(listID);\n  };\n\n  const renderEditInput = () => {\n  \n    return (\n      <form onSubmit={handleFinishEditing}>\n        <StyledInput\n          type=\"text\"\n          value={listTitle}\n          onChange={handleChange}\n          autoFocus\n          onFocus={handleFocus}\n          onBlur={handleFinishEditing}\n        />\n      </form>\n    );\n  };\n\n  const handleFocus = e => {\n    e.target.select();\n  };\n\n  const handleChange = e => {\n    e.preventDefault();\n    setListTitle(e.target.value);\n  };\n\n  const handleFinishEditing = e => {\n    setIsEditing(false);\n    changeListTitleInFirebase(listID, listTitle);\n    dispatch(editTitle(listID, listTitle));\n  };\n\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n    {provided => (\n      <ListContainer {...provided.draggableProps} ref={provided.innerRef}\n      {...provided.dragHandleProps}>\n        <Droppable droppableId={String(listID)}>\n          {provided => (\n            <div>\n              <div>\n                {isEditing ? (\n                    renderEditInput()\n                ) : (\n                <TitleContainer onClick={() => setIsEditing(true)}>\n                  <ListTitle>{title}</ListTitle>\n                  <DeleteButton onClick={handleDeleteList}>\n                            delete\n                  </DeleteButton>\n                </TitleContainer>\n                )}\n              </div>\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n              {cards.map((card,index) => (\n                <TrelloCard key={card.id} text={card.text} id={card.id} index={index} listID={listID} />\n              ))}\n              {provided.placeholder}\n              <TrelloActionButton listID={listID} cardIndex={cards.length}/>\n            </div>\n          </div>\n          )}\n        </Droppable>\n      </ListContainer>\n    )}\n    </Draggable>\n  )\n};\n\nconst style = {\n  container: {\n    backgroundColor: \"#dfe3e6\",\n    borderRadius:3,\n    width: 300,\n    padding: 8,\n    marginRight:8,\n    height:\"100%\",\n  }\n}\n\nexport default connect()(TrelloList);\n","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport styled from \"styled-components\";\n\nconst TrelloOpenForm = ({ list, children, onClick }) => {\n  const buttonTextOpacity = list ? 1 : 0.5;\n  const buttonTextColor = list ? \"white\" : \"inherit\";\n  const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n\n  const OpenFormButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    border-radius: 3px;\n    height: 36px;\n    margin-left: 8px;\n    width: 300px;\n    padding-left: 10px;\n    padding-right: 10px;\n    opacity: ${buttonTextOpacity};\n    color: ${buttonTextColor};\n    background-color: ${buttonTextBackground};\n  `;\n\n  return (\n    <OpenFormButton onClick={onClick}>\n      <Icon>add</Icon>\n      <p style={{ flexShrink: 0 }}>{children}</p>\n    </OpenFormButton>\n  );\n};\n\nexport default TrelloOpenForm;\n","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport TrelloButton from \"./TrelloButton\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\nimport styled from \"styled-components\";\nimport TrelloForm from \"./TrelloForm\";\nimport TrelloOpenForm from \"./TrelloOpenForm\";\nimport {addListToFirebase,addCardToFirebase} from \"../config/firebase\";\n\nclass TrelloCreate extends React.PureComponent {\n  state = {\n    formOpen: false,\n    text: \"\"\n  };\n\n  openForm = () => {\n    this.setState({\n      formOpen: true\n    });\n  };\n\n  closeForm = e => {\n    this.setState({\n      formOpen: false,\n    });\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n\n  handleAddList = () => {\n    const {dispatch} = this.props;\n    const {text} = this.state;\n    if (text) {\n      this.setState({\n        text:\"\",\n      })\n      addListToFirebase(text);\n      //dispatch(addList(text));\n    }\n    return;\n  }\n\n  handleAddCard = () => {\n    const {dispatch,listID,cardIndex} = this.props;\n    const {text} = this.state;\n    if (text) {\n      this.setState({\n        text:\"\",\n      })\n      const card = addCardToFirebase(listID,text);\n      console.log(card);\n      this.props.dispatch(addCard(listID,card));\n    }\n    return;\n  }\n\n  renderOpenForm = () => {\n    const { list } = this.props;\n\n    const buttonText = list ? \"Add another list\" : \"Add another card\";\n    const buttonTextOpacity = list ? 1 : 0.5;\n    const buttonTextColor = list ? \"white\" : \"inherit\";\n    const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n\n    const OpenFormButton = styled.div`\n      display: flex;\n      align-items: center;\n      cursor: pointer;\n      border-radius: 3px;\n      height: 36px;\n      margin-left: 8px;\n      width: 300px;\n      padding-left: 10px;\n      padding-right: 10px;\n      opacity: ${buttonTextOpacity};\n      color: ${buttonTextColor};\n      background-color: ${buttonTextBackground};\n    `;\n\n    return (\n      <OpenFormButton onClick={this.openForm}>\n        <Icon>add</Icon>\n        <p style={{ flexShrink: 0 }}>{buttonText}</p>\n      </OpenFormButton>\n    );\n  };\n\n  render() {\n    const { text } = this.state;\n    const { list } = this.props;\n    return this.state.formOpen ? (\n      <TrelloForm\n        text={text}\n        onChange={this.handleInputChange}\n        closeForm={this.closeForm}\n      >\n        <TrelloButton onClick={list ? this.handleAddList : this.handleAddCard}>\n          {list ? \"Add List\" : \"Add Card\"}\n        </TrelloButton>\n      </TrelloForm>\n    ) : (\n      <TrelloOpenForm list={list} onClick={this.openForm}>\n        {list ? \"Add another list\" : \"Add another card\"}\n      </TrelloOpenForm>\n    );\n  }\n}\n\nexport default connect()(TrelloCreate);\n","import React, {Component} from 'react';\nimport TrelloList from './TrelloList';\nimport {connect} from 'react-redux';\nimport { createStore, applyMiddleware, bindActionCreators} from 'redux';\nimport thunk from 'redux-thunk';\nimport TrelloActionButton from './TrelloActionButton';\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd';\nimport {sort} from '../actions';\nimport styled from 'styled-components';\nimport { getListsThunk, watchListAddedEvent,updateDragThunk,watchListDeletedEvent} from '../actions/listsActions';\nimport {watchCardAddedEvent} from '../actions/cardsActions';\nimport {moveFirebaseList,moveFirebaseCard} from '../config/firebase';\nimport TrelloCreate from \"./TrelloCreate\";\n\nconst ListContainer=styled.div`\n  display:flex;\n  flex-direction:row;\n`;\n\nclass App extends Component {\n\n  onDragEnd = (result) => {\n    const {destination, source, draggableId, type} = result;\n    if(!destination) {\n      return;\n    }\n    //update in firebase\n    let newCardId;\n    if(type===\"list\")\n    {\n      moveFirebaseList(source.index, destination.index)\n    } else {\n      newCardId = moveFirebaseCard(source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId);\n      console.log(\"new card id\", newCardId)\n    }\n    //update in interface\n    this.props.dispatch(sort(\n      source.droppableId,\n      destination.droppableId,\n      source.index,\n      destination.index,\n      draggableId,\n      type,\n      newCardId\n    )\n  );\n  }\n\n  render() {\n    const {lists} = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div>\n          <h2>Trello Board Clone</h2>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {provided =>(\n              <ListContainer {...provided.droppableProps} ref={provided.innerRef}>\n                {lists.map((list,index) =>\n                  <TrelloList listID={list.id} key={list.id} title={list.title} cards = {list.cards} index={index}/>\n                )}\n                {provided.placeholder}\n                <TrelloCreate list />\n              </ListContainer>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    )\n  }\n}\nconst style = {\n  listsContainer : {\n    display:\"flex\",\n    flexDirection:\"row\",\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists,\n})\n\nconst mapDispatch = dispatch => {\n  let actions = bindActionCreators({ sort });\n  dispatch(getListsThunk())\n  watchListAddedEvent(dispatch)\n  watchListDeletedEvent(dispatch)\n  return {\n    ...actions,dispatch\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatch) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport {createStore, applyMiddleware} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    background-color: #854085;\n    box-sizing: border-box;\n    transition: all 0.5s ease-in;\n  }\n`;\n\nReactDOM.render(\n  <Provider store={store}>\n    <GlobalStyle />\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}